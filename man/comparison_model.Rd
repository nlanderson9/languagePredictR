% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comparison_model.R
\name{comparison_model}
\alias{comparison_model}
\title{Create Comparison Model}
\usage{
comparison_model(input, outcome, outcomeType, predictor, progressBar = TRUE)
}
\arguments{
\item{input}{A dataframe containing a column with predictor data (numeric variable) and an outcome variable (numeric or two-level factor)}

\item{outcome}{A string consisting of the column name for the outcome variable in \code{inputDataframe}}

\item{outcomeType}{A string consisting of the type of outcome variable being used - options are "binary" or "continuous"}

\item{predictor}{A string consisting of the column name for the predictor data in \code{inputDataframe}}

\item{progressBar}{Show a progress bar. Defaults to TRUE.}
}
\value{
An object of the type "compModel"
}
\description{
#' @description This function creates a regression model using a single numeric variable as a predictor, and a specified variable as the outcome. It is intended for comparison against models that use language as a predictor (created by \code{\link{language_model}}).
}
\examples{
\dontrun{
movie_review_data1$cleanText = clean_text(movie_review_data1$text)

# Using language to predict "Positive" vs. "Negative" reviews
movie_model_valence_language = language_model(movie_review_data1,
                                     outcome = "valence",
                                     outcomeType = "binary",
                                     text = "cleanText")

summary(movie_model_valence_language)

# Is it possible that people write more for negative reviews?
# How does that compare to the language predictors?
movie_review_data1$word_count = corpus(movie_model_data1$cleanText) \%>\% tokens() \%>\% ntoken()

# Using word count to predict "Positive" vs. "Negative" reviews
movie_model_valence_wordcount = comparison_model(movie_review_data1,
                                     outcome = "valence",
                                     outcomeType = "binary",
                                     predictor = "word_count")

summary(movie_model_valence_wordcount)
}
}
